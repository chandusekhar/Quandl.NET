﻿using System;
using System.Net.Http;
using System.Collections.Generic;
using System.Linq;
using Quandl.NET.Core;
using Quandl.NET.Core.Enum;
using Quandl.NET.Core.Response;
using Quandl.NET.Infrastructure.Attribute;
using Refit;
using System.IO;
using System.Text;
using System.Threading.Tasks;

/* ******** Hey You! *********
 *
 * This is a generated file, and gets rewritten every time you build the
 * project. If you want to edit it, you need to edit the mustache template
 * in the Refit package */

namespace RefitInternalGenerated
{
    [AttributeUsage (AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate)]
    sealed class PreserveAttribute : Attribute
    {
#pragma warning disable 0649
        //
        // Fields
        //
        public bool AllMembers;

        public bool Conditional;
#pragma warning restore 0649
    }
}

namespace Quandl.NET.Infrastructure.RefitInterface
{
    using RefitInternalGenerated;

    [Preserve]
    partial class AutoGeneratedIDatabaseApi : IDatabaseApi
    {
        public HttpClient Client { get; protected set; }
        readonly Dictionary<string, Func<HttpClient, object[], object>> methodImpls;

        public AutoGeneratedIDatabaseApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            methodImpls = requestBuilder.InterfaceHttpMethods.ToDictionary(k => k, v => requestBuilder.BuildRestResultFuncForMethod(v));
            Client = client;
        }

        public virtual Task<Stream> GetEntireDatabaseAsync(string databaseCode,DownloadType? downloadType,string apiKey)
        {
            var arguments = new object[] { databaseCode,downloadType,apiKey };
            return (Task<Stream>) methodImpls["GetEntireDatabaseAsync"](Client, arguments);
        }

        public virtual Task<GetDatabaseMetadataResponse> GetDatabaseMetadataAsync(string databaseCode,ReturnFormat returnFormat,string apiKey)
        {
            var arguments = new object[] { databaseCode,returnFormat,apiKey };
            return (Task<GetDatabaseMetadataResponse>) methodImpls["GetDatabaseMetadataAsync"](Client, arguments);
        }

        public virtual Task<GetListOfDatabasesResponse> GetListOfDatabasesAsync(ReturnFormat returnFormat,int? perPage,int? page,string apiKey)
        {
            var arguments = new object[] { returnFormat,perPage,page,apiKey };
            return (Task<GetListOfDatabasesResponse>) methodImpls["GetListOfDatabasesAsync"](Client, arguments);
        }

        public virtual Task<Stream> GetListOfDatabaseContentsAsync(string databaseCode,string apiKey)
        {
            var arguments = new object[] { databaseCode,apiKey };
            return (Task<Stream>) methodImpls["GetListOfDatabaseContentsAsync"](Client, arguments);
        }

        public virtual Task<SearchForDatabasesResponse> SearchForDatabasesAsync(ReturnFormat returnFormat,string query,int? perPage,int? page,string apiKey)
        {
            var arguments = new object[] { returnFormat,query,perPage,page,apiKey };
            return (Task<SearchForDatabasesResponse>) methodImpls["SearchForDatabasesAsync"](Client, arguments);
        }

    }
}
